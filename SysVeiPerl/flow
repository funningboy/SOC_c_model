key => module                      # $self->{tag}=module;
symbol => counter                  # if( $self->{tag} eq 'module'   ){ $grp = set_module_graph->new($id,$name);  }
operator => (                      # if( $self->{tag} eq 'module'   ){ $self->{tag}=interface; $interface_lvl++; }
symbol => out                      # if( $self->{tag} eq 'interface'){ $grp->set_interface($id,$name); $id++; }
operator => ,                      # nop
symbol => clk                      # if( $self->{tag} eq 'interface'){ $grp->set_interface($id,$name); $id++; }
operator => ,                      # nop
symbol => reset                    # if( $self->{tag} eq 'interface'){ $grp->set_interface($id,$name); $id++; }
operator => )                      # if( $self->{tag} eq 'interface'){ $interface_lvl--; }
operator => ;                      # if( $self->{tag} eq 'interface' && $interface_lvl == 0 ) ? pass: error;
key => parameter                   # $self->{tag}=parameter;
symbol => WIDTH                    # if( $self->{tag} eq 'parameter'){ $grp->push_par_queue($name); //$name=WIDTH; }
operator => =                      # if( $self->{tag} eq 'parameter'){ $grp->push_par_queue($name); //$name==;     }
number => 8                        # if( $self->{tag} eq 'parameter'){ $grp->push_par_queue($name); //$name=8;     }
operator => ;                      # if( $self->{tag} eq 'parameter'){ $str = $grp->pop_all_par_queue(); //WIDTH = 8; }
key => output                      # $self->{tag}=output;
operator => [                      # if( $self->{tag} eq 'output' ){ $grp->push_out_queue($name); //$name=[; $port_lvl++; }
symbol => WIDTH                    # if( $self->{tag} eq 'output' ){ $grp->push_out_queue($name); //$name=WIDTH; }
operator => -
number => 1
operator => :
number => 0
operator => ]                      # $port_lvl--;
symbol => out                      # grp->set_port($id,$len,$name);
operator => ;                      # if( $self>{tag} eq 'output' ){ $str = $grp->pop_all_out_queue(); }
key => input                       # $self->{tag}=input;
symbol => clk                      # $slef->{tag} 
operator => ,
symbol => reset
operator => ;
key => reg
operator => [
symbol => WIDTH
operator => -
number => 1
operator => :
number => 0
operator => ]
symbol => out
operator => ;
key => wire
symbol => clk
operator => ,
symbol => reset
operator => ;
key => always                 # $self->{tag}=always
operator => @                 # if( $self->{tag} eq 'always' ){ $grp->push_senstive_queue();}
operator => (                 # $always_lvl++;
key => posedge                # if( )
symbol => clk
operator => )
symbol => out
operator => <=
symbol => out
operator => +
number => 1
operator => ;
key => always
operator => @
symbol => reset
key => if
operator => (
symbol => reset
operator => )
key => assign
symbol => out
operator => =
number => 0
operator => ;
key => else
key => deassign
symbol => out
operator => ;
key => endmodule
synbols...
$VAR1 = {
          'out' => 7,
          'WIDTH' => 3,
          'reset' => 5,
          'clk' => 4,
          'counter' => 1
        };
operators...
$VAR1 = {
          '<=' => 1,
          ']' => 2,
          ':' => 2,
          '=' => 2,
          ',' => 4,
          '+' => 1,
          '-' => 2,
          ')' => 3,
          '@' => 2,
          '[' => 2,
          '(' => 3,
          ';' => 9
        };
$VAR1 = {
          '8' => 1,
          '1' => 3,
          '0' => 3
        };
$VAR1 = {};
keys...
$VAR1 = {
          'deassign' => 1,
          'input' => 1,
          'else' => 1,
          'wire' => 1,
          'output' => 1,
          'if' => 1,
          'parameter' => 1,
          'posedge' => 1,
          'endmodule' => 1,
          'reg' => 1,
          'assign' => 1,
          'module' => 1,
          'always' => 2
        };
counter$VAR1 = {
          'out' => 0,
          'WIDTH' => 0,
          'reset' => 0,
          'clk' => 0
        };
